{"version":3,"file":"ngneat-input-mask.mjs","sources":["../../../../projects/ngneat/input-mask/src/lib/config.ts","../../../../projects/ngneat/input-mask/src/lib/input-mask.directive.ts","../../../../projects/ngneat/input-mask/src/lib/input-mask.module.ts","../../../../projects/ngneat/input-mask/src/lib/constants.ts","../../../../projects/ngneat/input-mask/src/public-api.ts","../../../../projects/ngneat/input-mask/src/ngneat-input-mask.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport class InputMaskConfig {\n  isAsync = false;\n  inputSelector = 'input';\n}\n\nexport const INPUT_MASK_CONFIG = new InjectionToken<InputMaskConfig>(\n  'InputMaskConfig'\n);\n","import { isPlatformServer } from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  PLATFORM_ID,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NgControl,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport _Inputmask from 'inputmask';\nimport type Inputmask from 'inputmask';\n\nimport { InputmaskOptions } from './types';\nimport { InputMaskConfig, INPUT_MASK_CONFIG } from './config';\n\n// The initial issue: https://github.com/ngneat/input-mask/issues/40\n// Webpack 5 has module resolution changes. Libraries should configure the `output.export`\n// (https://webpack.js.org/configuration/output/#outputlibraryexport) property when published in\n// a UMD format, to tell Webpack that there's a default export.\n// The `_Inputmask` is an object with 2 properties: `{ __esModule: true, default: Inputmask }`.\n// But we want to be backwards-compatible, so we try to read the `default` property first; otherwise, we fall back to `_Inputmask`.\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst InputmaskConstructor =\n  (_Inputmask as unknown as { default?: Inputmask.Static }).default ||\n  _Inputmask;\n\n@Directive({\n  selector: '[inputMask]',\n})\nexport class InputMaskDirective<T = any>\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator\n{\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static ngAcceptInputType_inputMask: InputmaskOptions<any> | null | undefined;\n\n  /**\n   * Helps you to create input-mask based on https://github.com/RobinHerbots/Inputmask\n   * Supports form-validation out-of-the box.\n   * Visit https://github.com/ngneat/input-mask for more info.\n   */\n  @Input()\n  set inputMask(inputMask: InputmaskOptions<T> | null | undefined) {\n    if (inputMask) {\n      this.inputMaskOptions = inputMask;\n      this.updateInputMask();\n    }\n  }\n\n  inputMaskPlugin: Inputmask.Instance | null = null;\n  nativeInputElement: HTMLInputElement | null = null;\n  defaultInputMaskConfig = new InputMaskConfig();\n\n  private inputMaskOptions: InputmaskOptions<T> | null = null;\n\n  /* The original `onChange` function coming from the `setUpControl`. */\n  private onChange: (value: T | null) => void = () => {};\n\n  private mutationObserver: MutationObserver | null = null;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: string,\n    private elementRef: ElementRef<HTMLInputElement | any>,\n    private renderer: Renderer2,\n    @Optional() @Self() public ngControl: NgControl | null,\n    @Inject(INPUT_MASK_CONFIG) config: InputMaskConfig,\n    private ngZone: NgZone\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n    this.setNativeInputElement(config);\n  }\n\n  @HostListener('input', ['$event.target.value'])\n  onInput = (_: any) => {};\n\n  @HostListener('blur', ['$event.target.value'])\n  onTouched = (_: any) => {};\n\n  ngOnInit(): void {\n    if (this.control) {\n      this.control.setValidators(\n        this.control.validator\n          ? [this.control.validator, this.validate]\n          : [this.validate]\n      );\n\n      this.control.updateValueAndValidity();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.removeInputMaskPlugin();\n    this.mutationObserver?.disconnect();\n  }\n\n  writeValue(value: string): void {\n    if (this.nativeInputElement) {\n      this.renderer.setProperty(this.nativeInputElement, 'value', value ?? '');\n    }\n  }\n\n  registerOnChange(onChange: (value: T | null) => void): void {\n    this.onChange = onChange;\n    const parser = this.inputMaskOptions?.parser;\n    this.onInput = (value) => {\n      this.onChange(parser && value ? parser(value) : value);\n    };\n  }\n\n  registerOnTouched(fn: VoidFunction): void {\n    this.onTouched = fn;\n  }\n\n  validate = (control: AbstractControl): ValidationErrors | null =>\n    !control.value || !this.inputMaskPlugin || this.inputMaskPlugin.isValid()\n      ? null\n      : { inputMask: true };\n\n  setDisabledState(disabled: boolean): void {\n    if (this.nativeInputElement) {\n      this.renderer.setProperty(this.nativeInputElement, 'disabled', disabled);\n    }\n  }\n\n  private updateInputMask(): void {\n    this.removeInputMaskPlugin();\n    this.createInputMaskPlugin();\n    // This re-creates the `onInput` function since `inputMaskOptions` might be changed and the `parser`\n    // property now differs.\n    this.registerOnChange(this.onChange);\n  }\n\n  private createInputMaskPlugin(): void {\n    const { nativeInputElement, inputMaskOptions } = this;\n\n    if (\n      isPlatformServer(this.platformId) ||\n      !nativeInputElement ||\n      inputMaskOptions === null ||\n      Object.keys(inputMaskOptions).length === 0\n    ) {\n      return;\n    }\n\n    const { parser, ...options } = inputMaskOptions;\n    this.inputMaskPlugin = this.ngZone.runOutsideAngular(() =>\n      new InputmaskConstructor(options).mask(nativeInputElement)\n    );\n\n    if (this.control) {\n      setTimeout(() => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.control!.updateValueAndValidity();\n      });\n    }\n  }\n\n  private get control(): AbstractControl | null | undefined {\n    return this.ngControl?.control;\n  }\n\n  private setNativeInputElement(config: InputMaskConfig) {\n    if (this.elementRef.nativeElement.tagName === 'INPUT') {\n      this.nativeInputElement = this.elementRef.nativeElement;\n    } else {\n      this.defaultInputMaskConfig = {\n        ...this.defaultInputMaskConfig,\n        ...config,\n      };\n      if (this.defaultInputMaskConfig.isAsync) {\n        // Create an observer instance linked to the callback function\n        this.mutationObserver = new MutationObserver((mutationsList) => {\n          for (const mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n              const nativeInputElement =\n                this.elementRef.nativeElement.querySelector(\n                  this.defaultInputMaskConfig.inputSelector\n                );\n              if (nativeInputElement) {\n                this.nativeInputElement = nativeInputElement;\n                this.mutationObserver?.disconnect();\n                this.createInputMaskPlugin();\n              }\n            }\n          }\n        });\n\n        // Start observing the target node for configured mutations\n        this.mutationObserver.observe(this.elementRef.nativeElement, {\n          childList: true,\n          subtree: true,\n        });\n      } else {\n        this.nativeInputElement = this.elementRef.nativeElement.querySelector(\n          this.defaultInputMaskConfig.inputSelector\n        );\n      }\n    }\n  }\n\n  private removeInputMaskPlugin(): void {\n    this.inputMaskPlugin?.remove();\n    this.inputMaskPlugin = null;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { InputMaskConfig, INPUT_MASK_CONFIG } from './config';\nimport { InputMaskDirective } from './input-mask.directive';\n\n@NgModule({\n  declarations: [InputMaskDirective],\n  exports: [InputMaskDirective],\n  providers: [\n    {\n      provide: INPUT_MASK_CONFIG,\n      useClass: InputMaskConfig,\n    },\n  ],\n})\nexport class InputMaskModule {\n  static forRoot(\n    config?: Partial<InputMaskConfig>\n  ): ModuleWithProviders<InputMaskModule> {\n    return {\n      ngModule: InputMaskModule,\n      providers: [{ provide: INPUT_MASK_CONFIG, useValue: config }],\n    };\n  }\n}\n","import { InputmaskOptions } from './types';\n\nexport const createMask = <T>(\n  options: string | InputmaskOptions<T>\n): InputmaskOptions<T> =>\n  typeof options === 'string' ? { mask: options } : options;\n","/*\n * Public API Surface of input-mask\n */\n\nexport * from './lib/input-mask.directive';\nexport * from './lib/input-mask.module';\nexport * from './lib/constants';\nexport * from './lib/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}